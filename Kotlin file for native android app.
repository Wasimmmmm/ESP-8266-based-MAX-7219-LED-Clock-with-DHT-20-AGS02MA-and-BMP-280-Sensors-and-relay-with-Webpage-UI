package com.example.nativeSmartHome

import android.content.Context
import android.net.nsd.NsdManager
import android.net.nsd.NsdServiceInfo
import android.os.Bundle
import android.util.Log
import android.widget.*
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import com.google.android.material.materialswitch.MaterialSwitch
import kotlinx.coroutines.*
import kotlinx.coroutines.sync.Mutex
import kotlinx.coroutines.sync.withLock
import org.json.JSONException
import org.json.JSONObject
import java.io.IOException
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import java.net.InetAddress

class MainActivity : AppCompatActivity() {

    // Network related
    private lateinit var client: OkHttpClient
    private var deviceHostname = "HOME"
    private var deviceIP = ""
    private lateinit var baseUrl: String

    // Network Service Discovery
    private lateinit var nsdManager: NsdManager
    private var discoveryListener: NsdManager.DiscoveryListener? = null
    private var resolveListener: NsdManager.ResolveListener? = null
    private val serviceType = "_http._tcp."

    // UI Elements - Sensor data
    private lateinit var tvIpAddress: TextView
    private lateinit var tvTemperature: TextView
    private lateinit var tvHumidity: TextView
    private lateinit var tvHeatIndex: TextView
    private lateinit var tvPressure: TextView
    private lateinit var tvTvoc: TextView
    private lateinit var tvBrightnessValue: TextView

    // UI Elements - Status
    private lateinit var tvFanStatus: TextView
    private lateinit var tvBigLightStatus: TextView
    private lateinit var tvLightStatus: TextView
    private lateinit var tvTimerStatus: TextView
    private lateinit var tvClockBrightnessValue: TextView
    private lateinit var tvExhaust: TextView
    private lateinit var tvVocStatus: TextView
    private lateinit var tvDeviceStatus: TextView

    // UI Elements - Switches
    private lateinit var switchFan: MaterialSwitch
    private lateinit var switchBigLight: MaterialSwitch
    private lateinit var switchLight: MaterialSwitch
    private lateinit var switchVocAuto: MaterialSwitch
    private lateinit var exhaustFan: MaterialSwitch
    private lateinit var switchAutoBrightness: MaterialSwitch
    private lateinit var switchClockAutoBrightness: MaterialSwitch

    // UI Elements - Timer controls
    private lateinit var spinnerTimerDevice: Spinner
    private lateinit var spinnerTimerState: Spinner
    private lateinit var etTimerDuration: EditText
    private lateinit var btnStartTimer: Button
    private lateinit var btnCancelTimer: Button
    private lateinit var btnRestartDevice: Button

    // UI Elements - Settings
    private lateinit var seekbarBrightness: SeekBar
    private lateinit var seekbarClockBrightness: SeekBar

    // Coroutine jobs for managing async operations
    private var sensorRefreshJob: Job? = null
    private var deviceStateRefreshJob: Job? = null
    private var brightnessUpdateJob: Job? = null
    private var clockBrightnessUpdateJob: Job? = null

    // Debounce delays - shorter for more responsive UI
    private val seekbarDebounceDelay = 150L
    private val switchMutex = Mutex()

    private val fastUpdateScope = CoroutineScope(Dispatchers.Main + SupervisorJob())
    private val slowUpdateScope = CoroutineScope(Dispatchers.Main + SupervisorJob())

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        initializeNetwork()
        initializeViews()
        setupEventListeners()
        setupSpinners()

        dataRefresh()

        loadDeviceSettings()

        // Initialize NSD Manager
        nsdManager = (getSystemService(Context.NSD_SERVICE) as NsdManager)

        // Try to discover device automatically
        discoverDevices()

    }

    override fun onResume() {
        super.onResume()
        if (deviceIP.isNotEmpty()) {
            dataRefresh()
        }
    }

    override fun onPause() {
        super.onPause()
        stopAllJobs()
        stopDiscovery()
    }

    override fun onDestroy() {
        super.onDestroy()
        stopAllJobs()
        stopDiscovery()
        fastUpdateScope.cancel()
        slowUpdateScope.cancel()
    }

    private fun stopAllJobs() {
        sensorRefreshJob?.cancel()
        deviceStateRefreshJob?.cancel()
        brightnessUpdateJob?.cancel()
        clockBrightnessUpdateJob?.cancel()
    }

    private fun initializeNetwork() {
        client = OkHttpClient.Builder()
            .connectTimeout(2, java.util.concurrent.TimeUnit.SECONDS)
            .readTimeout(3, java.util.concurrent.TimeUnit.SECONDS)
            .writeTimeout(3, java.util.concurrent.TimeUnit.SECONDS)
            .build()
        updateBaseUrl()
    }

    private fun updateBaseUrl() {
        baseUrl = if (deviceIP.isNotEmpty()) {
            "http://$deviceIP"
        } else {
            "http://$deviceHostname.local"
        }
    }

    private fun loadDeviceSettings() {
        val prefs = getSharedPreferences("JARVIS_PREFS", MODE_PRIVATE)
        deviceHostname = prefs.getString("device_hostname", deviceHostname) ?: deviceHostname
        deviceIP = prefs.getString("device_ip", "") ?: ""
        updateBaseUrl()
        updateDeviceDisplay()
    }

    private fun saveDeviceSettings() {
        val prefs = getSharedPreferences("JARVIS_PREFS", MODE_PRIVATE)
        prefs.edit().apply {
            putString("device_hostname", deviceHostname)
            putString("device_ip", deviceIP)
            apply()
        }
    }

    private fun updateDeviceDisplay() {
        val displayText = if (deviceIP.isNotEmpty()) {
            "Device: $deviceHostname ($deviceIP)"
        } else {
            "Device: $deviceHostname (discovering...)"
        }
        tvIpAddress.text = displayText
    }

    private fun initializeViews() {
        // Sensor data TextViews
        tvIpAddress = findViewById(R.id.tv_ip_address)
        tvTemperature = findViewById(R.id.tv_temperature)
        tvHumidity = findViewById(R.id.tv_humidity)
        tvHeatIndex = findViewById(R.id.tv_heat_index)
        tvPressure = findViewById(R.id.tv_pressure)
        tvTvoc = findViewById(R.id.tv_tvoc)
        tvBrightnessValue = findViewById(R.id.tv_brightness_value)

        // Status TextViews
        tvFanStatus = findViewById(R.id.tv_fan_status)
        tvBigLightStatus = findViewById(R.id.tv_big_light_status)
        tvLightStatus = findViewById(R.id.tv_light_status)
        tvTimerStatus = findViewById(R.id.tv_timer_status)
        tvClockBrightnessValue = findViewById(R.id.tv_clock_brightness_value)
        tvExhaust = findViewById(R.id.tv_exhaust_status)
        tvVocStatus = findViewById(R.id.tv_voc_status)
        tvDeviceStatus = findViewById(R.id.tv_device_status)

        // Switches
        switchFan = findViewById(R.id.switch_fan)
        switchBigLight = findViewById(R.id.switch_big_light)
        switchLight = findViewById(R.id.switch_light)
        switchVocAuto = findViewById(R.id.switch_voc_auto)
        exhaustFan = findViewById(R.id.exhaust_fan)
        switchAutoBrightness = findViewById(R.id.switch_auto_brightness)
        switchClockAutoBrightness = findViewById(R.id.switch_clock_auto_brightness)

        // Initial states
        switchFan.isChecked = true
        switchBigLight.isChecked = true
        switchLight.isChecked = true
        switchVocAuto.isChecked = true
        exhaustFan.isChecked = true
        switchAutoBrightness.isChecked = true
        switchClockAutoBrightness.isChecked = true

        // Timer controls
        spinnerTimerDevice = findViewById(R.id.spinner_timer_device)
        spinnerTimerState = findViewById(R.id.spinner_timer_state)
        etTimerDuration = findViewById(R.id.et_timer_duration)
        btnStartTimer = findViewById(R.id.btn_start_timer)
        btnCancelTimer = findViewById(R.id.btn_cancel_timer)

        // Settings
        seekbarBrightness = findViewById(R.id.seekbar_brightness)
        seekbarClockBrightness = findViewById(R.id.seekbar_clock_brightness)
        btnRestartDevice = findViewById(R.id.btn_restart_device)

        tvDeviceStatus.text = "Searching for device..."
        updateDeviceDisplay()

    }

    private fun discoverDevices() {
        stopDiscovery()

        tvDeviceStatus.text = "Discovering devices..."

        // Method 1: Try direct hostname resolution
        fastUpdateScope.launch {
            tryDirectHostnameResolution()
        }

        // Method 2: Use mDNS discovery
        startMdnsDiscovery()

        // Method 3: Network scan as fallback
        fastUpdateScope.launch {
            delay(5000) // Wait 5 seconds for mDNS
            if (deviceIP.isEmpty()) {
                performNetworkScan()
            }
        }
    }

    private suspend fun tryDirectHostnameResolution() = withContext(Dispatchers.IO) {
        try {
            val hostnamesToTry = listOf(
                "$deviceHostname.local",
                deviceHostname,
                "${deviceHostname}.lan"
            )

            for (hostname in hostnamesToTry) {
                try {
                    val address = InetAddress.getByName(hostname)
                    val ip = address.hostAddress

                    // Test if the device responds
                    val testUrl = "http://$ip/deviceStates"
                    val request = Request.Builder().url(testUrl).build()
                    val response = client.newCall(request).execute()

                    if (response.isSuccessful) {
                        withContext(Dispatchers.Main) {
                            deviceIP = ip ?: ""
                            updateBaseUrl()
                            updateDeviceDisplay()
                            saveDeviceSettings()
                            dataRefresh()
                            tvDeviceStatus.text = "Connected via hostname resolution"
                            Log.d("Discovery", "Device found via hostname: $hostname -> $ip")
                        }
                        return@withContext
                    }
                } catch (e: Exception) {
                    Log.d("Discovery", "Failed to resolve $hostname: ${e.message}")
                }
            }
        } catch (e: Exception) {
            Log.e("Discovery", "Hostname resolution failed", e)
        }
    }

    private fun startMdnsDiscovery() {
        resolveListener = object : NsdManager.ResolveListener {
            override fun onResolveFailed(serviceInfo: NsdServiceInfo, errorCode: Int) {
                Log.e("Discovery", "Resolve failed: $errorCode")
            }

            override fun onServiceResolved(serviceInfo: NsdServiceInfo) {
                Log.d("Discovery", "Service resolved: ${serviceInfo.serviceName}")

                val host = serviceInfo.host
                val port = serviceInfo.port
                val ip = host.hostAddress

                Log.d("Discovery", "Device found: ${serviceInfo.serviceName} at $ip:$port")

                // Verify this is our device by checking the service info
                fastUpdateScope.launch {
                    val testResult = testDeviceConnection(ip ?: "")
                    if (testResult) {
                        deviceIP = ip ?: ""
                        updateBaseUrl()
                        updateDeviceDisplay()
                        saveDeviceSettings()
                        dataRefresh()
                        tvDeviceStatus.text = "Connected via mDNS discovery"
                        stopDiscovery()
                    }
                }
            }
        }

        discoveryListener = object : NsdManager.DiscoveryListener {
            override fun onDiscoveryStarted(regType: String) {
                Log.d("Discovery", "Service discovery started")
            }

            override fun onServiceFound(service: NsdServiceInfo) {
                Log.d("Discovery", "Service found: ${service.serviceName}")

                // Check if this might be our device
                if (service.serviceName.contains(deviceHostname, ignoreCase = true) ||
                    service.serviceName.contains("ESP", ignoreCase = true) ||
                    service.serviceName.contains("jarvis", ignoreCase = true) ||
                    service.serviceName.contains("smarthome", ignoreCase = true)) {

                    Log.d("Discovery", "Attempting to resolve: ${service.serviceName}")
                    nsdManager.resolveService(service, resolveListener)
                }
            }

            override fun onServiceLost(service: NsdServiceInfo) {
                Log.d("Discovery", "Service lost: ${service.serviceName}")
            }

            override fun onDiscoveryStopped(serviceType: String) {
                Log.d("Discovery", "Discovery stopped")
            }

            override fun onStartDiscoveryFailed(serviceType: String, errorCode: Int) {
                Log.e("Discovery", "Discovery start failed: $errorCode")
                nsdManager.stopServiceDiscovery(this)
            }

            override fun onStopDiscoveryFailed(serviceType: String, errorCode: Int) {
                Log.e("Discovery", "Discovery stop failed: $errorCode")
            }
        }

        nsdManager.discoverServices(serviceType, NsdManager.PROTOCOL_DNS_SD, discoveryListener)
    }

    private suspend fun performNetworkScan() = withContext(Dispatchers.IO) {
        try {
            val wifiManager = applicationContext.getSystemService(Context.WIFI_SERVICE) as android.net.wifi.WifiManager
            val dhcpInfo = wifiManager.dhcpInfo

            // Get network base (e.g., 192.168.1.)
            val networkBase = String.format(
                "%d.%d.%d.",
                dhcpInfo.gateway and 0xFF,
                dhcpInfo.gateway shr 8 and 0xFF,
                dhcpInfo.gateway shr 16 and 0xFF
            )

            withContext(Dispatchers.Main) {
                tvDeviceStatus.text = "Scanning network: $networkBase*"
            }

            // Scan common IP ranges
            val jobs = mutableListOf<Deferred<Unit>>()

            for (i in 100..120) { // Common static IP range
                jobs.add(async {
                    val ip = "$networkBase$i"
                    if (testDeviceConnection(ip)) {
                        withContext(Dispatchers.Main) {
                            deviceIP = ip
                            updateBaseUrl()
                            updateDeviceDisplay()
                            saveDeviceSettings()
                            dataRefresh()
                            tvDeviceStatus.text = "Connected via network scan"
                            Log.d("Discovery", "Device found via network scan: $ip")
                        }
                    }
                })
            }

            jobs.awaitAll()

            if (deviceIP.isEmpty()) {
                withContext(Dispatchers.Main) {
                    tvDeviceStatus.text = "Device not found. Check network and device name."
                }
            }

        } catch (e: Exception) {
            Log.e("Discovery", "Network scan failed", e)
            withContext(Dispatchers.Main) {
                tvDeviceStatus.text = "Network scan failed"
            }
        }
    }

    private suspend fun testDeviceConnection(ip: String): Boolean = withContext(Dispatchers.IO) {
        try {
            val request = Request.Builder()
                .url("http://$ip/deviceStates")
                .build()

            val response = client.newCall(request).execute()

            if (response.isSuccessful) {
                return@withContext true
            }
        } catch (e: Exception) {
            Log.d("Discovery", "Connection test failed for $ip: ${e.message}")
        }

        return@withContext false
    }

    private fun stopDiscovery() {
        try {
            discoveryListener?.let {
                nsdManager.stopServiceDiscovery(it)
            }
        } catch (e: Exception) {
            Log.e("Discovery", "Error stopping discovery", e)
        }
        discoveryListener = null
        resolveListener = null
    }


    private fun dataRefresh() {

        sensorRefreshJob = slowUpdateScope.launch {
            while (isActive) {
                fetchVOCControlStateAsync()
                fetchExhaustFanStateAsync()
                fetchClockBrightnessStateAsync()
                delay(5000)
            }
        }

        deviceStateRefreshJob = fastUpdateScope.launch {
            while (isActive) {
                fetchDeviceStatesAsync()
                fetchSensorDataAsync()
                fetchTimerStatusAsync()
                delay(1000)
            }
        }
    }

    private fun setupEventListeners() {
        // Ultra-fast switch responses with immediate UI feedback
        switchFan.setOnCheckedChangeListener { buttonView, isChecked ->
            if (buttonView.isPressed) {
                tvFanStatus.text = if (isChecked) "On" else "Off"

                fastUpdateScope.launch {
                    switchMutex.withLock {
                        val success = toggleDeviceAsync("fan")
                        if (!success) {
                            withContext(Dispatchers.Main) {
                                switchFan.isChecked = !isChecked
                                tvFanStatus.text = if (!isChecked) "On" else "Off"
                                showError("Failed to toggle fan")
                            }
                        }
                        fetchDeviceStatesAsync()
                    }
                }
            }
        }

        switchBigLight.setOnCheckedChangeListener { buttonView, isChecked ->
            if (buttonView.isPressed) {
                tvBigLightStatus.text = if (isChecked) "On" else "Off"

                fastUpdateScope.launch {
                    switchMutex.withLock {
                        val success = toggleDeviceAsync("bigLight")
                        if (!success) {
                            withContext(Dispatchers.Main) {
                                switchBigLight.isChecked = !isChecked
                                tvBigLightStatus.text = if (!isChecked) "On" else "Off"
                                showError("Failed to toggle big light")
                            }
                        }
                        fetchDeviceStatesAsync()
                    }
                }
            }
        }

        switchLight.setOnCheckedChangeListener { buttonView, isChecked ->
            if (buttonView.isPressed) {
                tvLightStatus.text = if (isChecked) "On" else "Off"

                fastUpdateScope.launch {
                    switchMutex.withLock {
                        val success = toggleDeviceAsync("light")
                        if (!success) {
                            withContext(Dispatchers.Main) {
                                switchLight.isChecked = !isChecked
                                tvLightStatus.text = if (!isChecked) "On" else "Off"
                                showError("Failed to toggle light")
                            }
                        }
                        fetchDeviceStatesAsync()
                    }
                }
            }
        }

        // Fast response switches
        switchVocAuto.setOnCheckedChangeListener { buttonView, isChecked ->
            if (buttonView.isPressed) {
                tvVocStatus.text = if (isChecked) "On" else "Off"

                fastUpdateScope.launch {
                    switchMutex.withLock {
                        val success = toggleVOCControlAsync(isChecked)
                        if (!success) {
                            withContext(Dispatchers.Main) {
                                switchVocAuto.isChecked = !isChecked
                                tvVocStatus.text = if (!isChecked) "On" else "Off"
                                showError("Failed to toggle VOC control")
                            }
                        }
                        fetchVOCControlStateAsync()
                    }
                }
            }
        }

        exhaustFan.setOnCheckedChangeListener { buttonView, isChecked ->
            if (buttonView.isPressed) {
                tvExhaust.text = if (isChecked) "On" else "Off"

                fastUpdateScope.launch {
                    switchMutex.withLock {
                        val success = toggleClockRelayAsync(isChecked)
                        if (!success) {
                            withContext(Dispatchers.Main) {
                                exhaustFan.isChecked = !isChecked
                                tvExhaust.text = if (!isChecked) "On" else "Off"
                                showError("Failed to toggle exhaust fan")
                            }
                        }
                        fetchExhaustFanStateAsync()
                    }
                }
            }
        }

        switchAutoBrightness.setOnCheckedChangeListener { buttonView, isChecked ->
            if (buttonView.isPressed) {
                seekbarBrightness.isEnabled = !isChecked
                fastUpdateScope.launch { toggleAutoBrightnessAsync(isChecked) }
            }
        }

        switchClockAutoBrightness.setOnCheckedChangeListener { buttonView, isChecked ->
            if (buttonView.isPressed) {
                seekbarClockBrightness.isEnabled = !isChecked
                fastUpdateScope.launch { toggleClockAutoBrightnessAsync(isChecked) }
            }
        }

        // Faster brightness controls
        seekbarBrightness.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
                if (fromUser) {
                    tvBrightnessValue.text = "$progress%"
                }
            }

            override fun onStartTrackingTouch(seekBar: SeekBar?) {}

            override fun onStopTrackingTouch(seekBar: SeekBar?) {
                seekBar?.let {
                    brightnessUpdateJob?.cancel()
                    brightnessUpdateJob = fastUpdateScope.launch {
                        delay(seekbarDebounceDelay)
                        setBrightnessAsync(it.progress)
                    }
                }
            }
        })

        seekbarClockBrightness.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
                if (fromUser) {
                    tvClockBrightnessValue.text = progress.toString()
                }
            }

            override fun onStartTrackingTouch(seekBar: SeekBar?) {}

            override fun onStopTrackingTouch(seekBar: SeekBar?) {
                seekBar?.let {
                    clockBrightnessUpdateJob?.cancel()
                    clockBrightnessUpdateJob = fastUpdateScope.launch {
                        delay(seekbarDebounceDelay)
                        setClockBrightnessAsync(it.progress)
                    }
                }
            }
        })

        // Fast button responses
        btnStartTimer.setOnClickListener {
            fastUpdateScope.launch { startTimerAsync() }
        }
        btnCancelTimer.setOnClickListener {
            fastUpdateScope.launch { cancelAllTimersAsync() }
        }
        btnRestartDevice.setOnClickListener { restartDevice() }
    }

    private fun setupSpinners() {
        val deviceAdapter = ArrayAdapter.createFromResource(
            this,
            R.array.timer_devices,
            android.R.layout.simple_spinner_item
        )
        deviceAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        spinnerTimerDevice.adapter = deviceAdapter

        updateTimerStateSpinner("Fan")

        spinnerTimerDevice.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
            override fun onItemSelected(parent: AdapterView<*>?, view: android.view.View?, position: Int, id: Long) {
                val selectedDevice = parent?.getItemAtPosition(position).toString()
                updateTimerStateSpinner(selectedDevice)
            }

            override fun onNothingSelected(parent: AdapterView<*>?) {}
        }
    }

    private fun updateTimerStateSpinner(device: String) {
        val stateAdapter = if (device == "Fan") {
            ArrayAdapter.createFromResource(this, R.array.fan_states, android.R.layout.simple_spinner_item)
        } else {
            ArrayAdapter.createFromResource(this, R.array.light_states, android.R.layout.simple_spinner_item)
        }
        stateAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        spinnerTimerState.adapter = stateAdapter
    }

    // Optimized async network methods
    private suspend fun makeGetRequestAsync(endpoint: String): Result<String> = withContext(Dispatchers.IO) {
        try {
            val request = Request.Builder()
                .url(baseUrl + endpoint)
                .build()

            val response = client.newCall(request).execute()
            val responseBody = response.body?.string() ?: ""

            if (response.isSuccessful) {
                Result.success(responseBody)
            } else {
                Result.failure(Exception("HTTP ${response.code}"))
            }
        } catch (e: IOException) {
            Result.failure(e)
        }
    }

    private suspend fun makePostRequestAsync(endpoint: String, postData: String): Result<String> = withContext(Dispatchers.IO) {
        try {
            val body = RequestBody.create(
                "application/x-www-form-urlencoded".toMediaType(),
                postData
            )

            val request = Request.Builder()
                .url(baseUrl + endpoint)
                .post(body)
                .build()

            val response = client.newCall(request).execute()
            val responseBody = response.body?.string() ?: ""

            if (response.isSuccessful) {
                Result.success(responseBody)
            } else {
                Result.failure(Exception("HTTP ${response.code}"))
            }
        } catch (e: IOException) {
            Result.failure(e)
        }
    }

    // Fast async data fetching methods
    private suspend fun fetchSensorDataAsync() = withContext(Dispatchers.Main) {
        val result = makeGetRequestAsync("/sensorData")
        result
            .onSuccess { response ->
            try {
                val json = JSONObject(response)
                tvTemperature.text = String.format("%.1f°C", json.getDouble("avgTemp"))
                tvHumidity.text = String.format("%.1f%%", json.getDouble("avgHumid"))
                tvHeatIndex.text = String.format("%.1f°C", json.getDouble("heatIndex"))
                tvPressure.text = String.format("%.1fmmHg", json.getDouble("pressure"))
                tvTvoc.text = String.format("%.3fppm", (json.getDouble("tvoc"))/1000.0)

                val brightness = json.getInt("brightness")
                tvBrightnessValue.text = "$brightness%"
                if (!switchAutoBrightness.isPressed) seekbarBrightness.progress = brightness

                val autoBrightness = json.getBoolean("autoBrightness")
                if (!switchAutoBrightness.isPressed) {
                    switchAutoBrightness.isChecked = autoBrightness
                    seekbarBrightness.isEnabled = !autoBrightness
                    }
                } catch (e: JSONException) {
                    Log.e("MainActivity", "Sensor data parse error", e)
                }
            }
            .onFailure {
                tvTemperature.text = "--"
                tvHumidity.text = "--"
                tvHeatIndex.text = "--"
                tvPressure.text = "--"
                tvTvoc.text = "--"
                tvBrightnessValue.text = "--"
            }
    }

    private suspend fun fetchDeviceStatesAsync() = withContext(Dispatchers.Main) {
        val result = makeGetRequestAsync("/deviceStates")
        result
            .onSuccess { response ->
            try {
                val json = JSONObject(response)

                if (!switchFan.isPressed) {
                    val fanState = json.getString("fan")
                    tvFanStatus.text = fanState
                    switchFan.isChecked = !fanState.contains("Off")
                }

                if (!switchBigLight.isPressed) {
                    val bigLightState = json.getString("bigLight")
                    tvBigLightStatus.text = bigLightState
                    switchBigLight.isChecked = bigLightState == "On"
                }

                if (!switchLight.isPressed) {
                    val lightState = json.getString("light")
                    tvLightStatus.text = lightState
                    switchLight.isChecked = lightState == "On"
                    }
                } catch (e: JSONException) {
                    Log.e("MainActivity", "Device states parse error", e)
                }
            }
            .onFailure {
                tvFanStatus.text = "--"
                tvBigLightStatus.text = "--"
                tvLightStatus.text = "--"
            }
    }

    private suspend fun fetchTimerStatusAsync() = withContext(Dispatchers.Main) {
        val result = makeGetRequestAsync("/timer/status")
        result
            .onSuccess { response ->
            try {
                val json = JSONObject(response)
                val hasActiveTimers = json.getBoolean("hasActiveTimers")

                if (!hasActiveTimers) {
                    tvTimerStatus.text = "No active timers"
                } else {
                    val timers = json.getJSONArray("timers")
                    val status = StringBuilder()
                    for (i in 0 until timers.length()) {
                        val timer = timers.getJSONObject(i)
                        if (i > 0) status.append("\n")
                        status.append(timer.getString("device"))
                            .append(" → ")
                            .append(timer.getString("targetState"))
                            .append(" in ")
                            .append(timer.getString("remainingTime"))
                    }
                    tvTimerStatus.text = status.toString()
                    }
                } catch (e: JSONException) {
                    Log.e("MainActivity", "Timer status parse error", e)
                }
            }
            .onFailure {
                tvTimerStatus.text = "--"
            }
    }

    private suspend fun fetchVOCControlStateAsync() = withContext(Dispatchers.Main) {
        val result = makeGetRequestAsync("/voc/auto")
        result.onSuccess { response ->
            val state = response.trim()
            if (state == "on" || state == "off") {
                if (!switchVocAuto.isPressed) {
                    switchVocAuto.isChecked = state == "on"
                    tvVocStatus.text = "${getString(R.string.activates_exhaust_fan_auto)} ${if (state == "on") "On" else "Off"}"
                }
            } else {
                Log.e("MainActivity", "Invalid VOC state: $state")
            }
        }.onFailure { error ->
            Log.e("MainActivity", "Failed to fetch VOC state: ${error.message}")
            if (!switchVocAuto.isPressed) {
                tvVocStatus.text = "--"
            }
        }
    }

    private suspend fun fetchExhaustFanStateAsync() = withContext(Dispatchers.Main) {
        val result = makeGetRequestAsync("/clock/relay/status")
        result.onSuccess { response ->
            val state = response.trim()
            if (state == "ON" || state == "OFF") {
                if (!exhaustFan.isPressed) {
                    exhaustFan.isChecked = state == "ON"
                    tvExhaust.text = if (state == "ON") "On" else "Off"
                }
            } else {
                Log.e("MainActivity", "Invalid relay state: $state")
            }
        }.onFailure { error ->
            Log.e("MainActivity", "Failed to fetch relay state: ${error.message}")
            if (!exhaustFan.isPressed) {
                tvExhaust.text = "--"
            }
        }
    }

    private suspend fun fetchClockBrightnessStateAsync() = withContext(Dispatchers.Main) {
        val result = makeGetRequestAsync("/clock/brightness")
        result.onSuccess { response ->
            try {
                val json = JSONObject(response)
                val brightness = json.getInt("brightness")
                val auto = json.getBoolean("auto")

                if (!switchClockAutoBrightness.isPressed) {
                    seekbarClockBrightness.progress = brightness
                    tvClockBrightnessValue.text = brightness.toString()
                    switchClockAutoBrightness.isChecked = auto
                    seekbarClockBrightness.isEnabled = !auto
                }
            } catch (e: JSONException) {
                Log.e("MainActivity", "Clock brightness parse error", e)
            }
        }
            .onFailure {
                tvClockBrightnessValue.text = "--"
            }
    }

    // Super fast device control methods
    private suspend fun toggleDeviceAsync(device: String): Boolean {
        val endpoint = when (device) {
            "fan" -> "/fan/toggle"
            "bigLight" -> "/output/1/toggle"
            "light" -> "/output/2/toggle"
            else -> return false
        }

        return try {
            val result = makeGetRequestAsync(endpoint)
            result.isSuccess
        } catch (e: Exception) {
            false
        }
    }

    private suspend fun toggleVOCControlAsync(enabled: Boolean): Boolean {
        return try {
            val result = makeGetRequestAsync("/voc/auto?state=${if (enabled) "on" else "off"}")
            result.isSuccess
        } catch (e: Exception) {
            false
        }
    }

    private suspend fun toggleClockRelayAsync(enabled: Boolean): Boolean {
        return try {
            val result = makeGetRequestAsync("/clock/relay?state=${if (enabled) "on" else "off"}")
            result.isSuccess
        } catch (e: Exception) {
            false
        }
    }

    private suspend fun toggleAutoBrightnessAsync(enabled: Boolean) = withContext(Dispatchers.Main) {
        val result = makeGetRequestAsync("/brightness/auto?state=${if (enabled) "true" else "false"}")
        result.onSuccess {
            seekbarBrightness.isEnabled = !enabled
            if (enabled) {
                delay(100)
                fetchSensorDataAsync()
            }
        }.onFailure { error ->
            showError("Failed to toggle auto brightness: ${error.message}")
            fetchSensorDataAsync()
        }
    }

    private suspend fun toggleClockAutoBrightnessAsync(enabled: Boolean) = withContext(Dispatchers.Main) {
        val result = makePostRequestAsync("/clock/brightness/auto", "state=${if (enabled) "on" else "off"}")
        result.onSuccess {
            seekbarClockBrightness.isEnabled = !enabled
        }.onFailure { error ->
            showError("Failed to toggle clock auto brightness: ${error.message}")
            fetchClockBrightnessStateAsync()
        }
    }

    private suspend fun setBrightnessAsync(value: Int) {
        val result = makeGetRequestAsync("/brightness?value=$value")
        result.onFailure { error ->
            showError("Failed to set brightness: ${error.message}")
            fetchSensorDataAsync()
        }
    }

    private suspend fun setClockBrightnessAsync(value: Int) {
        val result = makePostRequestAsync("/clock/brightness", "value=$value")
        result.onFailure { error ->
            showError("Failed to set clock brightness: ${error.message}")
            fetchClockBrightnessStateAsync()
        }
    }

    // Fast timer methods
    private suspend fun startTimerAsync() = withContext(Dispatchers.Main) {
        val device = spinnerTimerDevice.selectedItem.toString()
        val state = spinnerTimerState.selectedItem.toString()
        val durationStr = etTimerDuration.text.toString()

        if (durationStr.isEmpty()) {
            Toast.makeText(this@MainActivity, "Please enter a valid duration", Toast.LENGTH_SHORT).show()
            return@withContext
        }

        val duration = try {
            durationStr.toInt()
        } catch (e: NumberFormatException) {
            Toast.makeText(this@MainActivity, "Please enter a valid number", Toast.LENGTH_SHORT).show()
            return@withContext
        }

        if (duration < 1) {
            Toast.makeText(this@MainActivity, "Duration must be at least 1 minute", Toast.LENGTH_SHORT).show()
            return@withContext
        }

        val deviceParam = when (device.lowercase().replace(" ", "")) {
            "biglight" -> "bigLight"
            else -> device.lowercase().replace(" ", "")
        }

        val postData = "device=$deviceParam&state=$state&duration=$duration"

        val result = makePostRequestAsync("/timer", postData)
        result.onSuccess {
            Toast.makeText(this@MainActivity, "Timer started for $device", Toast.LENGTH_SHORT).show()
            etTimerDuration.setText("")
            delay(100)
            fetchTimerStatusAsync()
        }.onFailure { error ->
            showError("Failed to start timer: ${error.message}")
        }
    }

    private suspend fun cancelAllTimersAsync() = withContext(Dispatchers.Main) {
        val result = makePostRequestAsync("/timer/cancel", "")
        result.onSuccess {
            Toast.makeText(this@MainActivity, "All timers cancelled", Toast.LENGTH_SHORT).show()
            delay(100)
            fetchTimerStatusAsync()
        }.onFailure { error ->
            showError("Failed to cancel timers: ${error.message}")
        }
    }

    private fun restartDevice() {
        AlertDialog.Builder(this)
            .setTitle("Restart Device")
            .setMessage("Are you sure you want to restart JARVIS?")
            .setPositiveButton("Yes") { _, _ ->
                fastUpdateScope.launch {
                    val result = makeGetRequestAsync("/reset")
                    result.onSuccess {
                        Toast.makeText(
                            this@MainActivity,
                            "Device restart initiated. Reconnecting in 8 seconds...",
                            Toast.LENGTH_LONG
                        ).show()

                        stopAllJobs()
                        delay(8000)
                        dataRefresh()
                    }.onFailure { error ->
                        showError("Failed to restart device: ${error.message}")
                    }
                }
            }
            .setNegativeButton("No", null)
            .show()
    }

    private fun showError(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }
}
