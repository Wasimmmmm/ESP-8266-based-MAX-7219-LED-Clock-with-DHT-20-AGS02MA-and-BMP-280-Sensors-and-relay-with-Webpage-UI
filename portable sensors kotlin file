package com.example.portablesensors

import android.os.Bundle
import android.util.Log
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import kotlinx.coroutines.*
import org.json.JSONException
import org.json.JSONObject
import java.io.IOException
import okhttp3.*
import kotlin.math.pow

class MainActivity : AppCompatActivity() {

    // Network related
    private lateinit var client: OkHttpClient
    private var deviceIP = "192.168.0.115"
    private lateinit var baseUrl: String

    // UI Elements - Sensor data only
    private lateinit var tvIpAddress: TextView
    private lateinit var tvTemperature: TextView
    private lateinit var tvHumidity: TextView
    private lateinit var tvPressure: TextView
    private lateinit var tvTvoc: TextView
    private lateinit var tvHeatIndex: TextView
    private lateinit var tvDeviceStatus: TextView
    private lateinit var btnRestartDevice: Button

    // Coroutine job for managing sensor refresh
    private var sensorRefreshJob: Job? = null
    private val updateScope = CoroutineScope(Dispatchers.Main + SupervisorJob())

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        initializeNetwork()
        initializeViews()
        setupEventListeners()
        loadDeviceIP()

        startSensorRefresh()
    }

    override fun onResume() {
        super.onResume()
        startSensorRefresh()
    }

    override fun onPause() {
        super.onPause()
        stopSensorRefresh()
    }

    override fun onDestroy() {
        super.onDestroy()
        stopSensorRefresh()
        updateScope.cancel()
    }

    private fun stopSensorRefresh() {
        sensorRefreshJob?.cancel()
    }

    private fun initializeNetwork() {
        client = OkHttpClient.Builder()
            .connectTimeout(3, java.util.concurrent.TimeUnit.SECONDS)
            .readTimeout(5, java.util.concurrent.TimeUnit.SECONDS)
            .writeTimeout(3, java.util.concurrent.TimeUnit.SECONDS)
            .build()
        updateBaseUrl()
    }

    private fun updateBaseUrl() {
        baseUrl = "http://$deviceIP"
    }

    private fun loadDeviceIP() {
        val prefs = getSharedPreferences("SENSOR_PREFS", MODE_PRIVATE)
        deviceIP = prefs.getString("device_ip", deviceIP) ?: deviceIP
        updateBaseUrl()
        tvIpAddress.text = "Device IP: $deviceIP"
    }

    private fun initializeViews() {
        // Sensor data TextViews
        tvIpAddress = findViewById(R.id.tv_ip_address)
        tvTemperature = findViewById(R.id.tv_temperature)
        tvHumidity = findViewById(R.id.tv_humidity)
        tvPressure = findViewById(R.id.tv_pressure)
        tvTvoc = findViewById(R.id.tv_tvoc)
        tvHeatIndex = findViewById(R.id.tv_heat_index)
        tvDeviceStatus = findViewById(R.id.tv_device_status)

        // Buttons
        btnRestartDevice = findViewById(R.id.btn_restart_device)

        // Set initial IP display
        tvIpAddress.text = "Device IP: $deviceIP"
        tvDeviceStatus.text = "Connecting..."
    }

    private fun startSensorRefresh() {
        stopSensorRefresh() // Stop any existing refresh job

        sensorRefreshJob = updateScope.launch {
            while (isActive) {
                fetchSensorDataAsync()
                fetchDeviceInfoAsync()
                delay(4000) // Refresh every 4 seconds
            }
        }
    }

    private fun setupEventListeners() {

        btnRestartDevice.setOnClickListener {
            updateScope.launch {
                restartDevice()
            }
        }
    }

    private fun calculateHeatIndex(tempF: Double, humidity: Double): Double {
        // Simple formula for temperatures below 80째F
        if (tempF < 80.0) {
            return 0.5 * (tempF + 61.0 + ((tempF - 68.0) * 1.2) + (humidity * 0.094))
        }

        // Full Rothfusz regression equation for temperatures 80째F and above
        val T = tempF
        val RH = humidity

        // Coefficients for the NOAA heat index formula
        val c1 = -42.379
        val c2 = 2.04901523
        val c3 = 10.14333127
        val c4 = -0.22475541
        val c5 = -0.00683783
        val c6 = -0.05481717
        val c7 = 0.00122874
        val c8 = 0.00085282
        val c9 = -0.00000199

        var heatIndex = c1 + (c2 * T) + (c3 * RH) + (c4 * T * RH) +
                (c5 * T.pow(2)) + (c6 * RH.pow(2)) + (c7 * T.pow(2) * RH) +
                (c8 * T * RH.pow(2)) + (c9 * T.pow(2) * RH.pow(2))

        // Adjustments for specific conditions
        if (RH < 13 && T >= 80 && T <= 112) {
            val adjustment = ((13 - RH) / 4) * kotlin.math.sqrt((17 - kotlin.math.abs(T - 95)) / 17)
            heatIndex -= adjustment
        } else if (RH > 85 && T >= 80 && T <= 87) {
            val adjustment = ((RH - 85) / 10) * ((87 - T) / 5)
            heatIndex += adjustment
        }

        return heatIndex
    }


    // Network request helper
    private suspend fun makeGetRequestAsync(endpoint: String): Result<String> = withContext(Dispatchers.IO) {
        try {
            val request = Request.Builder()
                .url(baseUrl + endpoint)
                .build()

            val response = client.newCall(request).execute()
            val responseBody = response.body?.string() ?: ""

            if (response.isSuccessful) {
                Result.success(responseBody)
            } else {
                Result.failure(Exception("HTTP ${response.code}"))
            }
        } catch (e: IOException) {
            Result.failure(e)
        }
    }

    // Fetch sensor data from ESP8266
    private suspend fun fetchSensorDataAsync() = withContext(Dispatchers.Main) {
        val result = makeGetRequestAsync("/sensor/data")
        result
            .onSuccess { response ->
                try {
                    val json = JSONObject(response)

                    // Update sensor readings
                    val temperature = json.getDouble("temperature")
                    val humidity = json.getDouble("humidity")
                    val pressure = json.getDouble("pressure")
                    val tvoc = json.getInt("tvoc")

                    // Convert Celsius to Fahrenheit for heat index calculation
                    val tempF = (temperature * 9.0 / 5.0) + 32.0
                    val heatIndexF = calculateHeatIndex(tempF, humidity)
                    val heatIndexC = (heatIndexF - 32.0) * 5.0 / 9.0

                    tvTemperature.text = String.format("%.1f째C", temperature)
                    tvHumidity.text = String.format("%.1f%%", humidity)
                    tvPressure.text = String.format("%.1f mmHg", pressure)
                    tvTvoc.text = String.format("%.3f PPM", tvoc/1000.0)
                    tvHeatIndex.text = String.format("%.1f째C", heatIndexC)
                    tvDeviceStatus.text = "Connected - Data Updated"

                } catch (e: JSONException) {
                    Log.e("MainActivity", "Sensor data parse error", e)
                    tvDeviceStatus.text = "Data Parse Error"
                }
            }
            .onFailure { error ->
                Log.e("MainActivity", "Failed to fetch sensor data", error)
                tvTemperature.text = "--"
                tvHumidity.text = "--"
                tvPressure.text = "--"
                tvTvoc.text = "--"
                tvHeatIndex.text = "--"
                tvDeviceStatus.text = "Connection Failed"
            }
    }

    // Fetch device info
    private suspend fun fetchDeviceInfoAsync() = withContext(Dispatchers.Main) {
        val result = makeGetRequestAsync("/device/info")
        result
            .onSuccess { response ->
                try {
                    val json = JSONObject(response)
                    val hostname = json.getString("hostname")
                    val ip = json.getString("ip")

                    tvIpAddress.text = "Device: $hostname ($ip)"

                } catch (e: JSONException) {
                    Log.e("MainActivity", "Device info parse error", e)
                }
            }
            .onFailure { error ->
                Log.e("MainActivity", "Failed to fetch device info", error)
            }
    }

    // Restart the ESP8266 device
    private suspend fun restartDevice() = withContext(Dispatchers.Main) {
        val result = makeGetRequestAsync("/device/restart")
        result
            .onSuccess {
                Toast.makeText(
                    this@MainActivity,
                    "Device restart initiated. Reconnecting in 5 seconds...",
                    Toast.LENGTH_LONG
                ).show()

                tvDeviceStatus.text = "Restarting..."

                // Stop refresh and wait for device to restart
                stopSensorRefresh()
                delay(5000)
                startSensorRefresh()
            }
            .onFailure { error ->
                Toast.makeText(
                    this@MainActivity,
                    "Failed to restart device: ${error.message}",
                    Toast.LENGTH_SHORT
                ).show()
                Log.e("MainActivity", "Restart failed", error)
            }
    }
}
